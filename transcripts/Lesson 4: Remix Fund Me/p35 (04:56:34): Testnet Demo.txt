All right, awesome. We have all the basic functionality of our contract that we need here. Now we're finally actually going to run everything on a Testnet and see everything happened live before our eyes.

Are you ready? Let's do this.

So let's go over to the Deploy tab. And we're going to switch of course to Injected Web3. Remember But we're using Injected Web3, because our /PriceConverter.sol is using Chainlink Oracle's that actually exist and are actually monitoring the Rinkeby network for us.

Now we're going to scroll down to, and we're going to choose the FundMe contract. And we're going to go ahead and deploy. 

Once again, we want to make sure we're on the Rinkeby test net. And we have a little bit of Rinkeby eth in our wallet, let's go ahead and deploy, confirm. And we'll wait a little bit. And I'll pull up our log here. And we'll wait a little bit for our contract to get deployed. 

Alright, great. It looks like our contract has indeed been deployed. If we scroll down, we can see all of our functionality, minimum USD is going to be that $50. 

But with 18 zeros so that the units are the same as Ethereum, the owner of our contract was set to our address, the instant we deployed this contract, it was deployed by calling our constructor function. 

So this address 0x 106 x is going to be the same as the address in our  MetaMask, your address here, of course, is going to be a little bit different than mine, we have our funders array, which, of course is going to be blank, we have our address array, which is also going to be blank. 

And then we have two functions that we can use to modify the state of the blockchain withdraw is going to be orange, because we're not paying any Ethereum we're actually gaining Ethereum or whatever native blockchain currency fund is going to be read, because fun is a payable function that we are going to be sending Ethereum to or sending whatever native blockchain currency that you're working with. 

So let's go ahead and see how this all works. So first, let's go ahead and fund this contract. Again, funding, we got to do a little bit of math, 

right now, since the price of eth is around $3,000. And we're looking for $50. Minimum, we do 50 divided by 3000. We can do 3000 divided by 50, we can do 50 divided by 3000. So we know that around 0.02 Ethereum, should be enough for this contract to work. So 0.02 Ethereum is this much way, we can copy that, paste that into here. 

So when we hit fund, it should actually pass. And we do indeed see  MetaMasks pop up. And we'll go ahead and confirm. Once this transaction goes through, we'll be able to see this contract on ether scan with the funds in it. 

Now if we don't add way here, if we don't add a value, once again, we had fund will say gas estimation failed because we're not sending enough here. And in fact, we even see execution reverted didn't send enough, we can absolutely send this transaction however, it's going to fail. Great. So now that our transaction has gone through, if we go on to the rink the ether scan, once we wait a little bit for it to finish indexing here on the Rinkeby ether scan, we can see that transaction actually went through for doing the funding, we can actually see a lot of different details going on with this transaction as well. And if we scroll down, we once again, you can see all the information about us calling this fun function, gas limit gas, you should the gas fees, gas price, and we can see the input data as well, we can see that we called the fund function down here. We'll learn more about the input data later. If we go to the contract that we deployed, we can now see two transactions, we can see our contract created transaction. And we can also see we called a font method. And if we look at the balance of our contract, and now has 0.02 ether, which makes sense, since we just sent it 0.02. If we put that 0.02 eth in terms of way back into the value section, and we call font again, after this transaction goes through, we should see this number go from 0.02 to 0.04. Now after we wait a brief delay, we do indeed see the balance has gone up to 0.04, which is exactly what we'd expect. Awesome. So our funding mechanism is working correctly. And if we go down into our array, and our mapping to do address to array, and we paste our address, we should see the phone number show up. And if we go to funders of zero, we see our address. And if we go to funders of one, we also see our address and we see that and we see this call going through if we go to funders have to in our log over here, we actually see that we get an error an optimization that we could make to our contract in the future is to check to see if an address is already in the funders array and then not add it if it's already there. Now let's go ahead and try to call this withdrawal function. But let's try to call it with a different address than the address we originally deployed this contract with. So to do that, scroll all the way to the top of this here. And I'm going to go to my Metamask. And I'm going to switch to a second account and hit connect. Now, our remixes should be updated with the new account that's in here, you'll see that if I switch back to account one, it switches back to account one, so long as they're both connected, you can see which accounts are connected to applications by clicking this connected button and see which ones are connected. If you ever want to disconnect that account, you can click the three little dots and it disconnect the account. And now we can see that this account is not connected. However, count two is connected. Let's go back to account one and Connect account one so that both of them are now connected. But we'll switch to account two, let's switch to account two, because again, account two isn't the owner of this contract. We scroll down to owner, we can see owner's 0x 1066 Something something and account two is 0x 043. Something something awesome. So what do you think will happen when we hit withdraw here? Well, our modifier only owner should kick in. And we should get notified that if we send the transaction, we'll get this error sender is not owner. So let's try it. Ah gas estimation failed, we do get this error. Sender is not owner, which is perfect. This is exactly what we want, we could absolutely send this transaction if we wanted to. But that would just be a waste of gas because this transaction is going to fail. However, if we switch back to account one, and we hit withdraw,  MetaMask will pop up, enabling us to confirm and withdraw the ether out of this contract address. Now if we look at this contract address on ether scan, after a brief delay, we'll see the balance go from 0.04 back down to zero. And we'll see our wallet balance go up from what it is back to 0.04 plus what it was. And after a brief delay, you can see our balance is indeed back down to zero in our contract. Now, if we do address to amount for our wallet address that was doing the funding, it's back down to zero. And if we try to check the address of funders at index zero, we get called to funders that fund me errored execution reverted. 
